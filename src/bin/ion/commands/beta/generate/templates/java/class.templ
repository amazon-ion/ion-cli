{# Includes the macros for anonymous types that will be added as child classes #}
{% import "nested_type.templ"  as macros %}
{% import "util_macros.templ"  as util_macros %}


package {{ namespace }};
import java.util.ArrayList;
import com.amazon.ion.IonReader;
import com.amazon.ion.IonException;
import com.amazon.ion.IonWriter;
import com.amazon.ion.IonType;
import java.io.IOException;

public class {{ target_kind_name }} {
    {% for field in fields -%}
           private {{ field.value_type }} {{ field.name | camel }};
    {% endfor %}

    public {{ target_kind_name }}() {}

    {% for field in fields -%}public {{ field.value_type }} get{% filter upper_camel %}{{ field.name }}{% endfilter %}() {
        return this.{{ field.name | camel }};
    }
    {% endfor %}

    {% for field in fields %}
        {% if field.value_type is containing("NestedType") %}
          public void set{% filter upper_camel %}{{ field.name }}{% endfilter %}(
          {{ macros::define_params_for_anonymous_type(nested_types=nested_types, field=field, abstract_data_type=abstract_data_type, initial_field_name=field.name) }}
          ) {
          {{ macros::initialize_anonymous_type(nested_types=nested_types, field=field, abstract_data_type=abstract_data_type) }}
          this.{{ field.name | camel }} = {{ field.name | camel }};
          return;
        {% else %}
        public void set{% filter upper_camel %}{{ field.name }}{% endfilter %}({{ field.value_type }} {{ field.name | camel }}) {
            this.{{ field.name | camel }} = {{ field.name | camel }};
            return;
        {% endif %}
    }
    {% endfor %}


    /**
     * Reads a {{ target_kind_name }} from an {@link IonReader}.
     *
     * This method does not advance the reader at the current level.
     * The caller is responsible for positioning the reader on the value to read.
     */
    public static {{ target_kind_name }} readFrom(IonReader reader) {
        {# Initializes all the fields of this class #}
        {% for field in fields -%}
            {{ field.value_type }} {{ field.name | camel }} =
            {% if field.value_type == "boolean" %}
                false
            {% elif field.value_type == "int" or field.value_type == "double" %}
                0
            {% else %}
                null
            {% endif %};
        {% endfor %}

        {# Reads `Structure` class with multiple fields based on `field.name` #}
        reader.stepIn();
        while (reader.hasNext()) {
            reader.next();
            String fieldName = reader.getFieldName();
            switch(fieldName) {
                {% for field in fields %}
                case "{{ field.name }}":
                    {{ field.name | camel }} = {% if field.value_type | is_built_in_type %}
                                                   {% if field.value_type == "bytes[]" %}
                                                        reader.newBytes();
                                                   {% else %}
                                                        reader.{{ field.value_type | camel }}Value();
                                                   {% endif %}
                                                {% elif field.value_type is containing("ArrayList") %}
                                                    {{ util_macros::read_as_sequence(field=field) }}
                                                {% else %}
                                                    {{ field.value_type }}.readFrom(reader);
                                                {% endif %}
                    break;
                {% endfor %}
                default:
                    throw new IonException("Can not read field name:" + fieldName + " for {{ target_kind_name }} as it doesn't exist in the given schema type definition.");
            }
        }
        reader.stepOut();

        {{ target_kind_name }} {{ target_kind_name | camel }} = new {{ target_kind_name }}();
        {% for field in fields -%}
            {{ target_kind_name | camel }}.{{ field.name | camel }} = {{ field.name | camel }};
        {% endfor %}

        return  {{ target_kind_name | camel }};
    }

    /**
     * Writes a {{ target_kind_name }} as Ion from an {@link IonWriter}.
     *
     * This method does not close the writer after writing is complete.
     * The caller is responsible for closing the stream associated with the writer.
     */
    public void writeTo(IonWriter writer) throws IOException {
         {# Writes `Structure` class with multiple fields based on `field.name` as an Ion struct #}
         writer.stepIn(IonType.STRUCT);
         {% for field in fields %}
             writer.setFieldName("{{ field.name }}");
             {% if field.value_type | is_built_in_type == false %}
                 {% if field.value_type is containing("ArrayList") %}
                    {{ util_macros::write_as_sequence(field=field) }}
                 {% else %}
                    this.{{ field.name | camel }}.writeTo(writer);
                 {% endif %}
             {% else %}
                    writer.write{{ field.isl_type_name | upper_camel }}(this.{{ field.name | camel }});
             {% endif %}
         {% endfor %}
         writer.stepOut();
    }

    {% for inline_type in nested_types -%}
        {{ macros::nested_type(target_kind_name=inline_type.target_kind_name, fields=inline_type.fields, abstract_data_type=inline_type.abstract_data_type, nested_anonymous_types=inline_type.nested_types) }}
    {% endfor -%}
}
