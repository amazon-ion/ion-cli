{# following macro defines an anonymous type as children class for its parent type definition #}
{% macro nested_type(target_kind_name, fields, abstract_data_type, nested_anonymous_types) -%}
    public static class {{ target_kind_name }} {
    {% for field in fields -%}
           private {{ field.value_type }} {{ field.name | camel }};
    {% endfor -%}

    public {{ target_kind_name }}() {}

    {% for field in fields %}public {{ field.value_type }} get{% filter upper_camel %}{{ field.name }}{% endfilter %}() {
        return this.{{ field.name | camel }};
    }
    {% endfor %}


    {% for field in fields %}
        {% if field.value_type is containing("NestedType") -%}
          public void set{% filter upper_camel -%}{{ field.name }}{% endfilter -%}(
          {{ self::define_params_for_anonymous_type(nested_types=nested_anonymous_types, field=field, abstract_data_type=abstract_data_type, initial_field_name=field.name) }}
          ) {
          {{ self::initialize_anonymous_type(nested_types=nested_anonymous_types, field=field, abstract_data_type=abstract_data_type) }}
          this.{{ field.name | camel }} = {{ field.name | camel }};
          return;
        {% else -%}
        public void set{% filter upper_camel -%}{{ field.name }}{% endfilter -%}({{ field.value_type }} {{ field.name | camel }}) {
            this.{{ field.name | camel }} = {{ field.name | camel }};
            return;
        {% endif -%}
    }
    {% endfor %}

    /**
     * Reads a {{ target_kind_name }} from an {@link IonReader}.
     *
     * This method does not advance the reader at the current level.
     * The caller is responsible for positioning the reader on the value to read.
     */
    public static {{ target_kind_name }} readFrom(IonReader reader) {
        {# Initializes all the fields of this class #}
        {% for field in fields -%}
            {{ field.value_type }} {{ field.name | camel }} =
            {% if field.value_type == "boolean" -%}
                false
            {% elif field.value_type == "int" or field.value_type == "double" -%}
                0
            {% else -%}
                null
            {% endif -%};
        {% endfor -%}
        {% if abstract_data_type == "Value"-%}
            {# Reads `Value` class with a single field `value` #}
            value = {% if fields[0].value_type | is_built_in_type -%}
                        {% if fields[0].value_type == "bytes[]" -%}
                            reader.newBytes();
                        {% else -%}
                            reader.{{ fields[0].value_type | camel }}Value();
                        {% endif -%}
                     {% else -%}
                        {{ fields[0].value_type }}.readFrom(reader);
                     {% endif -%}
        {% elif abstract_data_type is object and abstract_data_type is containing("Structure") -%}
            {# Reads `Structure` class with multiple fields based on `field.name` #}
            reader.stepIn();
            while (reader.hasNext()) {
                reader.next();
                String fieldName = reader.getFieldName();
                switch(fieldName) {
                    {% for field in fields -%}
                    case "{{ field.name }}":
                        {{ field.name | camel }} = {% if field.value_type | is_built_in_type %}
                                                       {% if field.value_type == "bytes[]" %}
                                                            reader.newBytes();
                                                       {% else %}
                                                            reader.{{ field.value_type | camel }}Value();
                                                       {% endif %}
                                                    {% else %}
                                                        {{ field.value_type }}.readFrom(reader);
                                                    {% endif %}
                        break;
                    {% endfor %}
                    default:
                        throw new IonException("Can not read field name:" + fieldName + " for {{ target_kind_name }} as it doesn't exist in the given schema type definition.");
                }
            }
            reader.stepOut();
        {% elif abstract_data_type is object and abstract_data_type is containing("Sequence") %}
            {# Reads `Sequence` class with a single field `value` that is an `ArrayList` #}
            {% if abstract_data_type["Sequence"].sequence_type == "List" %}
                if(reader.getType() != IonType.LIST) {
                    throw new IonException("Expected list, found " + reader.getType() + " while reading {{ target_kind_name }}.");
                }
            {% elif abstract_data_type["Sequence"].sequence_type == "SExp" %}
                if(reader.getType() != IonType.SEXP) {
                   throw new IonException("Expected sexpression, found " + reader.getType() + " while reading {{ target_kind_name }}.");
                }
            {% endif %}
            reader.stepIn();
            value = new {{ fields[0].value_type }}();
            {# Iterate through the `ArraList` and read each element in it based on the data type provided in `abstract_data_type[Sequence]` #}
            while (reader.hasNext()) {
                reader.next();
                {% if abstract_data_type["Sequence"].element_type | is_built_in_type == false %}
                    value.add({{ abstract_data_type["Sequence"].element_type }}.readFrom(reader));
                {% else %}
                    {% if abstract_data_type["Sequence"].element_type == "bytes[]" %}
                        value.add(reader.newBytes());
                    {% else %}
                        value.add(reader.{{ abstract_data_type["Sequence"].element_type | camel }}Value());
                    {% endif %}
                {% endif %}
            }
            reader.stepOut();
        {% endif %}
        {{ target_kind_name }} {{ target_kind_name | camel }} = new {{ target_kind_name }}();
        {% for field in fields -%}
            {{ target_kind_name | camel }}.{{ field.name | camel }} = {{ field.name | camel }};
        {% endfor %}

        return  {{ target_kind_name | camel }};
    }


    /**
     * Writes a {{ target_kind_name }} as Ion from an {@link IonWriter}.
     *
     * This method does not close the writer after writing is complete.
     * The caller is responsible for closing the stream associated with the writer.
     */
    public void writeTo(IonWriter writer) throws IOException {
         {% if abstract_data_type == "Value" %}
            {# Writes `Value` class with a single field `value` as an Ion value #}
            {% for field in fields %}
                {% if field.value_type | is_built_in_type == false  %}
                    this.{{ field.name | camel }}.writeTo(writer)?;
                {% else %}
                    writer.write{{ field.isl_type_name | upper_camel }}(this.value);
                {% endif %}
            {% endfor %}
         {% elif abstract_data_type is object and abstract_data_type is containing("Structure") %}
             {# Writes `Structure` class with multiple fields based on `field.name` as an Ion struct #}
             writer.stepIn(IonType.STRUCT);
             {% for field in fields %}
                 writer.setFieldName("{{ field.name }}");
                 {% if field.value_type | is_built_in_type == false %}
                     this.{{ field.name | camel }}.writeTo(writer);
                 {% else %}
                     writer.write{{ field.isl_type_name | upper_camel }}(this.{{ field.name | camel }});
                 {% endif %}
             {% endfor %}
             writer.stepOut();
         {% elif abstract_data_type is object and abstract_data_type is containing("Sequence") %}
            {# Writes `Sequence` class with a single field `value` that is an `ArrayList` as an Ion sequence #}
            {% if abstract_data_type["Sequence"].sequence_type == "List" %}
                writer.stepIn(IonType.LIST);
            {% else %}
                writer.stepIn(IonType.SEXP);
            {% endif %}
            for ({{ abstract_data_type["Sequence"].element_type }} value: this.value) {
                 {% if abstract_data_type["Sequence"].element_type | is_built_in_type  == false %}
                    value.writeTo(writer);
                 {% else %}
                    writer.write{{ abstract_data_type["Sequence"].element_type | upper_camel }}(value);
                 {% endif %}
            }
            writer.stepOut();
        {% endif %}
    }

        {% for inline_type in nested_anonymous_types -%}
            {{ self::nested_type(target_kind_name=inline_type.target_kind_name, fields=inline_type.fields, abstract_data_type=inline_type.abstract_data_type, nested_anonymous_types=inline_type.nested_types) }}
        {% endfor -%}
    }
{% endmacro nested_type -%}

{# following macro defines statements to initialize anonymous types for setter methods #}
{% macro initialize_anonymous_type(nested_types, field, abstract_data_type) %}
        {% set map = nested_types | group_by(attribute="target_kind_name") %}
        {% if abstract_data_type is object and abstract_data_type is containing("Sequence") %}
            {% set inline_type = map[abstract_data_type["Sequence"].element_type][0] %}
        {% else %}
            {% set inline_type = map[field.value_type][0] %}
        {% endif %}
        {{ inline_type.target_kind_name }} {{ field.name | camel }} = new {{ inline_type.target_kind_name }}();
        {% for inline_type_field in inline_type.fields %}
                {{ field.name | camel }}.set{{ inline_type_field.name | upper_camel }}({{ inline_type_field.name | camel }});
        {% endfor %}
{% endmacro %}

{# following macro defines arguments to setter methods for anonymous types #}
{% macro define_params_for_anonymous_type(nested_types, field, abstract_data_type, initial_field_name) %}
    {% set map = nested_types | group_by(attribute="target_kind_name") %}
    {% if abstract_data_type is object and abstract_data_type is containing("Sequence") %}
      {% set inline_type = map[abstract_data_type["Sequence"].element_type][0] %}
    {% else -%}
      {% set inline_type = map[field.value_type][0] %}
    {% endif -%}
    {% for inline_type_field in inline_type.fields | sort(attribute="name") %}
        {% if inline_type_field.value_type is containing("NestedType") %}
          {{ self::define_params_for_anonymous_type(nested_types=inline_type.nested_types, field=inline_type_field, abstract_data_type=inline_type.abstract_data_type, initial_field_name=initial_field_name) }}
        {% else %}
           {% if inline_type_field.name == "value" and not initial_field_name == field.name %}
                {{ inline_type_field.value_type }} {{ field.name | camel }}
           {% else %}
                {{ inline_type_field.value_type }} {{ inline_type_field.name | camel }}
           {% endif %}
        {% endif %}
        {% if not loop.last -%},{% endif -%}
    {% endfor %}
{% endmacro %}