package {{ namespace }};
import java.util.ArrayList;
import com.amazon.ion.IonReader;
import com.amazon.ion.IonException;
import com.amazon.ion.IonWriter;
import com.amazon.ion.IonType;
import java.io.IOException;

public class {{ target_kind_name }} {
    private {{ fields[0].value_type }} value;

    public {{ target_kind_name }}() {}

    public {{ fields[0].value_type }} getValue() {
        return this.value;
    }

    public void setValue({{ fields[0].value_type }} value) {
        this.value = value;
        return;
    }

    /**
     * Reads a {{ target_kind_name }} from an {@link IonReader}.
     *
     * This method does not advance the reader at the current level.
     * The caller is responsible for positioning the reader on the value to read.
     */
    public static {{ target_kind_name }} readFrom(IonReader reader) {
        {# Initializes all the fields of this class #}
        {{ fields[0].value_type }} value =
        {% if fields[0].value_type == "boolean" %}
            false
        {% elif fields[0].value_type == "int" or fields[0].value_type == "double" %}
            0
        {% else %}
            null
        {% endif %};
        {# Reads `Sequence` class with a single field `value` that is an `ArrayList` #}
         if(reader.getType() != IonType.{{ abstract_data_type["Sequence"].sequence_type | upper }}) {
            throw new IonException("Expected {{ abstract_data_type["Sequence"].sequence_type }}, found " + reader.getType() + " while reading {{ fields[0].name | camel }}.");
         }
        reader.stepIn();
        value = new {{ fields[0].value_type }}();
        {# Iterate through the `ArrayList` and read each element in it based on the data type provided in `abstract_data_type[Sequence]` #}
        while (reader.hasNext()) {
            reader.next();
            {% if abstract_data_type["Sequence"].element_type | is_built_in_type == false %}
                value.add({{ abstract_data_type["Sequence"].element_type }}.readFrom(reader));
            {% elif abstract_data_type["Sequence"].element_type == "bytes[]" %}
                value.add(reader.newBytes());
            {% else %}
                value.add(reader.{{ abstract_data_type["Sequence"].element_type | camel }}Value());
            {% endif %}
        }
        reader.stepOut();
        {{ target_kind_name }} {{ target_kind_name | camel }} = new {{ target_kind_name }}();
        {{ target_kind_name | camel }}.value = value;

        return  {{ target_kind_name | camel }};
    }

    /**
     * Writes a {{ target_kind_name }} as Ion from an {@link IonWriter}.
     *
     * This method does not close the writer after writing is complete.
     * The caller is responsible for closing the stream associated with the writer.
     */
    public void writeTo(IonWriter writer) throws IOException {
        {# Writes `Sequence` class with a single field `value` that is an `ArrayList` as an Ion sequence #}
        writer.stepIn(IonType.{{ abstract_data_type["Sequence"].sequence_type | upper }});
        for ({{ abstract_data_type["Sequence"].element_type }} value: this.value) {
             {% if abstract_data_type["Sequence"].element_type | is_built_in_type  == false %}
                value.writeTo(writer);
             {% else %}
                writer.write{{ abstract_data_type["Sequence"].element_type | upper_camel }}(value);
             {% endif %}
        }
        writer.stepOut();
    }
}
