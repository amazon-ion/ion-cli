{# Includes the macros for anonymous types that will be added as child classes #}
{% import "nested_type.templ"  as macros %}
{% import "util_macros.templ"  as util_macros %}

{% macro class(model, is_nested) %}

{# Verify that the abstract data type is a structure and store information for this structure #}
{% set struct_info = model.code_gen_type["Structure"] %}

{% if is_nested == true %} static {% endif %} class {{ model.name }} {
    {% for key, value in struct_info["fields"] -%}
           private {{ value.0 | to_string }} {{ key | camel }};
    {% endfor %}

    public {{ model.name }}() {}

    {% for key, value in struct_info["fields"] -%}public {{ value.0 | to_string }} get{% filter upper_camel %}{{ key }}{% endfilter %}() {
        return this.{{ key | camel }};
    }
    {% endfor %}

    {% for key, value in struct_info["fields"] %}
        {% set val = value.0 | to_string %}
        {% if val is containing("NestedType") %}
          public void set{% filter upper_camel %}{{ key }}{% endfilter %}(
          {{ macros::define_params_for_anonymous_type(nested_type=value.0, type_store=type_store, field_name=key, initial_field_name=key) }}
          ) {
          {{ macros::initialize_anonymous_type(nested_type=value.0, type_store=type_store, field_name=key) }}
          this.{{ key | camel }} = {{ key | camel }};
          return;
        {% else %}
        public void set{% filter upper_camel %}{{ key }}{% endfilter %}({{ val }} {{ key | camel }}) {
            this.{{ key | camel }} = {{ key | camel }};
            return;
        {% endif %}
    }
    {% endfor %}


    /**
     * Reads a {{ model.name }} from an {@link IonReader}.
     *
     * This method does not advance the reader at the current level.
     * The caller is responsible for positioning the reader on the value to read.
     */
    public static {{ model.name }} readFrom(IonReader reader) {
        {# Initializes all the fields of this class #}
        {% for field_name, field_val in struct_info["fields"] -%}
            {% set field_value = field_val.0 | to_string %}
            {{ field_value }} {{ field_name | camel }} =
            {% if field_value == "boolean" %}
                false
            {% elif field_value == "int" or field_value == "double" %}
                0
            {% else %}
                null
            {% endif %};
        {% endfor %}

        {# Reads `Structure` class with multiple fields based on `field.name` #}
        reader.stepIn();
        while (reader.hasNext()) {
            reader.next();
            String fieldName = reader.getFieldName();
            switch(fieldName) {
                {% for field_name, field_val in struct_info["fields"] %}
                {% set field_value = field_val.0 | to_string %}

                case "{{ field_name }}":
                    {{ field_name | camel }} = {% if field_value | is_built_in_type %}
                                                   {% if field_value == "bytes[]" %}
                                                        reader.newBytes();
                                                   {% elif field_value is containing("ArrayList") %}
                                                        {{ util_macros::read_as_sequence(field_value=field_value,field_name=field_name,type_store=type_store) }}
                                                   {% else %}
                                                        reader.{{ field_value | camel }}Value();
                                                   {% endif %}
                                                {% elif field_value is containing("ArrayList") %}
                                                    {{ util_macros::read_as_sequence(field_value=field_value,field_name=field_name,type_store=type_store) }}
                                                {% else %}
                                                    {{ field_value }}.readFrom(reader);
                                                {% endif %}
                    break;
                {% endfor %}
                default:
                    throw new IonException("Can not read field name:" + fieldName + " for {{ model.name }} as it doesn't exist in the given schema type definition.");
            }
        }
        reader.stepOut();

        {{ model.name }} {{ model.name | camel }} = new {{ model.name }}();
        {% for field_name, field_value in struct_info["fields"] -%}
            {{ model.name | camel }}.{{ field_name | camel }} = {{ field_name | camel }};
        {% endfor %}

        return  {{ model.name | camel }};
    }

    /**
     * Writes a {{ model.name }} as Ion from an {@link IonWriter}.
     *
     * This method does not close the writer after writing is complete.
     * The caller is responsible for closing the stream associated with the writer.
     */
    public void writeTo(IonWriter writer) throws IOException {
         {# Writes `Structure` class with multiple fields based on `field.name` as an Ion struct #}
         writer.stepIn(IonType.STRUCT);
         {% for field_name, field_val in struct_info["fields"] %}
             {% set field_value = field_val.0 | to_string %}
             writer.setFieldName("{{ field_name }}");
             {% if field_value | is_built_in_type == false %}
                 {% if field_value is containing("ArrayList") %}
                    {{ util_macros::write_as_sequence(field_value=field_value,field_name=field_name,type_store=type_store) }}
                 {% else %}
                    this.{{ field_name | camel }}.writeTo(writer);
                 {% endif %}
             {% else %}
                 {% if field_value is containing("ArrayList") %}
                    {{ util_macros::write_as_sequence(field_value=field_value,field_name=field_name,type_store=type_store) }}
                 {% else %}
                    writer.write{{ field_value | replace(from="double", to="float") | replace(from="boolean", to="bool") | upper_camel }}(this.{{ field_name | camel }});
                 {% endif %}
             {% endif %}
         {% endfor %}
         writer.stepOut();
    }

    {% for inline_type in model.nested_types -%}
        {% set is_nested = true %}
        {{ macros::nested_type(model=inline_type, is_nested=is_nested) }}
    {% endfor -%}
}
{% endmacro model %}
{{ self::class(model=model, is_nested=is_nested) }}