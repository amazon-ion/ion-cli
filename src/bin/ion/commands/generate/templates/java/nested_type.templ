{% import "util_macros.templ"  as util_macros %}

{# following macro defines an anonymous type as children class for its parent type definition #}
{% macro nested_type(model, is_nested) -%}
    {% if model.code_gen_type is containing("Structure")%}
        {% include "class.templ" %}
    {% endif %}
{% endmacro nested_type -%}

{# following macro defines statements to initialize anonymous types for setter methods #}
{% macro initialize_anonymous_type(nested_type, type_store, field_name) %}
        {% set inline_type = type_store[nested_type] %}
        {{ nested_type }} {{ field_name | camel }} = new {{ nested_type }}();
        {% if inline_type.code_gen_type is containing("Sequence") %}
            {{ field_name | camel }}.setValue(value);
        {% elif inline_type.code_gen_type is containing("Scalar") %}
            {{ field_name | camel }}.setValue(value);
        {% elif inline_type.code_gen_type is containing("Structure")%}
            {% for inline_type_field_name, inline_type_field_value in inline_type.code_gen_type["Structure"].fields %}
                {{ field_name | camel }}.set{{ inline_type_field_name | upper_camel }}({{ inline_type_field_name | camel }});
            {% endfor %}
        {% endif %}
{% endmacro %}

{# following macro defines arguments to setter methods for anonymous types #}
{% macro define_params_for_anonymous_type(nested_type, field_name, initial_field_name) %}
    {% set inline_type = type_store[nested_type] %}
    {% if inline_type.code_gen_type is containing("Structure") %}
        {% set inline_struct_type_info = inline_type.code_gen_type["Structure"] %}
        {% set field_names = inline_struct_type_info["fields"] | field_names %}
        {% for inline_type_field_name in field_names | sort %}
            {% set inline_type_field_value = inline_struct_type_info["fields"][inline_type_field_name] %}
            {% set value_type = inline_type_field_value.0 | fully_qualified_type_name %}
            {% if value_type is containing("NestedType") %}
               {{ self::define_params_for_anonymous_type(nested_type=inline_type_field_value.0, field_name=inline_type_field_name, initial_field_name=initial_field_name) }}
            {% else %}
               {% if inline_type_field_name == "value" and not initial_field_name == field_name %}
                    {{ value_type }} {{ field_name | camel }}
               {% else %}
                    {{ value_type }} {{ inline_type_field_name | camel }}
               {% endif %}
            {% endif %}
            {% if not loop.last -%},{% endif -%}
        {% endfor %}
    {% elif inline_type.code_gen_type is containing("Sequence") %}
        {% set sequence_info = model.code_gen_type["WrappedSequence"] %}
        {{ sequence_info["element_type"] | fully_qualified_type_name }} value
    {% elif inline_type.code_gen_type is containing("Scalar") %}
        {% set scalar_info = model.code_gen_type["WrappedScalar"] %}
        {% set base_type = scalar_info["base_type"] | fully_qualified_type_name %}
        {{ base_type }} value
    {% endif %}
{% endmacro %}