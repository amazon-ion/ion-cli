package {{ namespace }};
import java.util.ArrayList;
import com.amazon.ion.IonReader;
import com.amazon.ion.IonException;
import com.amazon.ion.IonWriter;
import com.amazon.ion.IonType;
import java.io.IOException;

public class {{ target_kind_name }} {
    private {{ fields[0].value_type }} value;

    public {{ target_kind_name }}() {}

    public {{ fields[0].value_type }} getValue() {
        return this.value;
    }

    public void setValue({{ fields[0].value_type }} value) {
        this.value = value;
        return;
    }

    /**
     * Reads a {{ target_kind_name }} from an {@link IonReader}.
     *
     * This method does not advance the reader at the current level.
     * The caller is responsible for positioning the reader on the value to read.
     */
    public static {{ target_kind_name }} readFrom(IonReader reader) {
        {# Initializes all the fields of this class #}
        {{ fields[0].value_type }} value =
        {% if fields[0].value_type == "boolean" %}
            false
        {% elif fields[0].value_type == "int" or fields[0].value_type == "double" %}
            0
        {% else %}
            null
        {% endif %};
        {# Reads `Value` class with a single field `value` #}
        value = {% if fields[0].value_type | is_built_in_type %}
                    {% if fields[0].value_type == "bytes[]" %}
                        reader.newBytes();
                    {% else %}
                        reader.{{ fields[0].value_type | camel }}Value();
                    {% endif %}
                 {% else %}
                    {{ fields[0].value_type }}.readFrom(reader);
                 {% endif %}
        {{ target_kind_name }} {{ target_kind_name | camel }} = new {{ target_kind_name }}();
        {{ target_kind_name | camel }}.value = value;

        return  {{ target_kind_name | camel }};
    }

    /**
     * Writes a {{ target_kind_name }} as Ion from an {@link IonWriter}.
     *
     * This method does not close the writer after writing is complete.
     * The caller is responsible for closing the stream associated with the writer.
     */
    public void writeTo(IonWriter writer) throws IOException {
        {# Writes `Value` class with a single field `value` as an Ion value #}
        {% if fields[0].value_type | is_built_in_type == false  %}
            this.value.writeTo(writer)?;
        {% else %}
            writer.write{{ fields[0].isl_type_name | upper_camel }}(this.value);
        {% endif %}
    }
}
