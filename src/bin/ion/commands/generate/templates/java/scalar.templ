{% macro scalar(model) %}
{% set full_namespace = namespace | join(sep=".") %}

package {{ full_namespace }};
import com.amazon.ion.IonReader;
import com.amazon.ion.IonException;
import com.amazon.ion.IonWriter;
import com.amazon.ion.IonType;
import java.io.IOException;

{# Verify that the abstract data type is a scalar type and store information for this scalar value #}
{% set scalar_info = model.code_gen_type["WrappedScalar"] %}
{% set base_type = scalar_info["base_type"] | fully_qualified_type_name %}

class {{ model.name }} {
    private {{ base_type }} value;

    public {{ model.name }}() {}

    public {{ base_type }} getValue() {
        return this.value;
    }

    public void setValue({{ base_type }} value) {
        this.value = value;
        return;
    }

   public static class {{ model.name }}Builder {
        {{ base_type }} value;

        {{ model.name }}Builder() {
            {# Initializes value #}
            this.value =
            {% if base_type == "boolean" %}
                false
            {% elif base_type == "int" or base_type == "double" %}
                0
            {% else %}
                null
            {% endif %};
        }

        public {{ model.name }}Builder value({{ base_type }} value) {
            this.value = value;
            return this;
        }

        public {{ model.name }} build() {
            {{ model.name }} {{ model.name | camel }} = new {{ model.name }}();
            {{ model.name | camel }}.value = value;

            return  {{ model.name | camel }};
        }
   }

    /**
     * Reads a {{ model.name }} from an {@link IonReader}.
     *
     * This method does not advance the reader at the current level.
     * The caller is responsible for positioning the reader on the value to read.
     */
    public static {{ model.name }} readFrom(IonReader reader) {
        {# Initializes the builder for this class #}
        {{ model.name }}Builder {{ model.name | camel }}Builder = new {{ model.name }}Builder();

        {# Reads `Value` class with a single field `value` #}
        {{ model.name | camel }}Builder = {{ model.name | camel }}Builder.value({% if base_type | is_built_in_type %}
                    {% if base_type == "bytes[]" %}
                        reader.newBytes();
                    {% else %}
                        reader.{{ base_type | camel }}Value()
                    {% endif %}
                 {% else %}
                    {{ base_type }}.readFrom(reader)
                 {% endif %});

        return  {{ model.name | camel }}Builder.build();
    }

    /**
     * Writes a {{ model.name }} as Ion from an {@link IonWriter}.
     *
     * This method does not close the writer after writing is complete.
     * The caller is responsible for closing the stream associated with the writer.
     */
    public void writeTo(IonWriter writer) throws IOException {
        {# Writes `Value` class with a single field `value` as an Ion value #}
        {% if base_type | is_built_in_type == false  %}
            this.value.writeTo(writer)?;
        {% else %}
            writer.write{{ base_type | replace(from="double", to="float") | replace(from="boolean", to="bool") | upper_camel }}(this.value);
        {% endif %}
    }
}
{% endmacro %}
{{ self::scalar(model=model) }}