{% import "nested_type.templ"  as macros %}

{% set sequence_info = model.code_gen_type["WrappedSequence"] %}


use {{ model.name | snake }}::{{ model.name }};

pub mod  {{ model.name | snake }} {
    use super::*;

    #[derive(Debug, Clone, Default)]
    pub struct {{ model.name }} {
        value: Vec<{{ sequence_info["element_type"] | fully_qualified_type_name }}>,
    }

    impl {{ model.name }} {
        pub fn new(value: Vec<{{ sequence_info["element_type"] | fully_qualified_type_name }}>) -> Self {
            Self {
                value,
            }
        }


        pub fn value(&self) -> &Vec<{{ sequence_info["element_type"] | fully_qualified_type_name }}> {
            &self.value
        }


        pub fn read_from(reader: &mut Reader) -> SerdeResult<Self> {
            let mut abstract_data_type = {{ model.name }}::default();

            if reader.ion_type() != Some(IonType::{{ sequence_info["sequence_type"] }}) {
               return validation_error(format!(
                   "Expected {{ sequence_info["sequence_type"] }}, found {} while reading {{ model.name }}.", reader.ion_type().unwrap()
               ));
            }

             reader.step_in()?;

             abstract_data_type.value = {
                 let mut values = vec![];

                 while reader.next()? != StreamItem::Nothing {
                    {% if sequence_info["element_type"] | fully_qualified_type_name | is_built_in_type == false %}
                        values.push({{ sequence_info["element_type"] | fully_qualified_type_name }}::read_from(reader)?);
                    {% else %}
                        values.push(reader.read_{% if field.source is defined and field.source == "symbol" %}symbol()?.text().unwrap(){% else %}{{ sequence_info["element_type"] | fully_qualified_type_name | lower | replace(from="string", to ="str") }}()?{% endif %}{% if sequence_info["element_type"] | fully_qualified_type_name | lower== "string" %} .to_string() {% endif %});
                    {% endif %}
                }
                values
             };
             reader.step_out()?;
             Ok(abstract_data_type)
        }

        pub fn write_to<W: IonWriter>(&self, writer: &mut W) -> SerdeResult<()> {
            writer.step_in(IonType::{{ sequence_info["sequence_type"] }})?;
            for value in &self.value {
                {% if sequence_info["element_type"] | fully_qualified_type_name | is_built_in_type  == false %}
                    value.write_to(writer)?;
                {% else %}
                   writer.write_{% if field.source is defined and field.source == "symbol" %}symbol{% else %}{{ sequence_info["element_type"] | fully_qualified_type_name | lower }}{% endif %}(value.to_owned())?;
                {% endif %}
            }
            writer.step_out()?;
            Ok(())
        }
    }


    {% for inline_type in model.nested_types -%}
            {% set is_nested = true %}
            {{ macros::nested_type(model=inline_type, is_nested=is_nested) }}
    {% endfor -%}
}
