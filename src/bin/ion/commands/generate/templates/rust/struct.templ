{# Includes the macros for anonymous types that will be added as child classes #}
{% import "nested_type.templ"  as macros %}
{% import "util_macros.templ"  as util_macros %}

use {{ target_kind_name | snake }}::{{ target_kind_name }};
pub mod  {{ target_kind_name | snake }} {
    use super::*;

    #[derive(Debug, Clone, Default)]
    pub struct {{ target_kind_name }} {
    {% for field in fields -%}
             {{ field.name | snake | indent(first = true) }}: {{ field.value_type }},
    {% endfor %}
    }

    impl {{ target_kind_name }} {
        pub fn new({% for field in fields | sort(attribute="name") -%}{{ field.name | snake }}: {{ field.value_type }},{% endfor %}) -> Self {
            Self {
                {% for field in fields -%}
                {{ field.name | snake }},
                {% endfor %}
            }
        }


        {% for field in fields -%}pub fn {{ field.name | snake }}(&self) -> &{{ field.value_type }} {
            &self.{{ field.name | snake }}
        }
        {% endfor %}


        pub fn read_from(reader: &mut Reader) -> SerdeResult<Self> {
            let mut abstract_data_type = {{ target_kind_name }}::default();

            reader.step_in()?;
            while reader.next()? != StreamItem::Nothing {
                if let Some(field_name) = reader.field_name()?.text() {
                    match field_name {
                        {% for field in fields -%}
                            {% if field.value_type | is_built_in_type == false %}
                                {% if field.value_type is containing("Vec") %}
                                     "{{ field.name }}" => { {{ util_macros::read_as_sequence(field=field) }} }
                                {% else %}
                                    "{{ field.name }}" => { abstract_data_type.{{ field.name | snake }} = {{ field.value_type }}::read_from(reader)?; }
                                {% endif %}
                            {% else %}
                                "{{ field.name }}" => { abstract_data_type.{{ field.name | snake}} = reader.read_{% if field.isl_type_name == "symbol" %}symbol()?.text().unwrap(){% else %}{{ field.value_type | lower | replace(from="string", to ="str") }}()?{% endif %}{% if field.value_type | lower== "string" %} .to_string() {% endif %}; }
                            {% endif %}
                        {% endfor %}
                     _ => {
                        {% if abstract_data_type["Structure"] %}
                            return validation_error(
                                "Can not read field name:{{ field.name }} for {{ target_kind_name }} as it doesn't exist in the given schema type definition."
                            );
                        {% endif %}
                     }
                    }
                }
            }
            reader.step_out()?;
            Ok(abstract_data_type)
        }

        pub fn write_to<W: IonWriter>(&self, writer: &mut W) -> SerdeResult<()> {
            writer.step_in(IonType::Struct)?;
            {% for field in fields %}
            writer.set_field_name("{{ field.name }}");
                {% if field.value_type | is_built_in_type == false %}
                    {% if field.value_type is containing("Vec") %}
                        {{ util_macros::write_as_sequence(field=field) }}
                    {% else %}
                        self.{{ field.name | snake }}.write_to(writer)?;
                    {% endif %}
                {% else %}
                    {# TODO: Change the following `to_owned` to only be used when writing i64,f32,f64,bool which require owned value as input #}
                    writer.write_{% if field.isl_type_name == "symbol" %}symbol{% else %}{{ field.value_type | lower }}{% endif %}(self.{{ field.name | snake }}.to_owned())?;
                {% endif %}
            {% endfor %}
            writer.step_out()?;
            Ok(())
        }
    }

    {% for inline_type in nested_types -%}
        {{ macros::nested_type(target_kind_name=inline_type.target_kind_name, fields=inline_type.fields, abstract_data_type=inline_type.abstract_data_type, nested_anonymous_types=inline_type.nested_types) }}
    {% endfor -%}
}
