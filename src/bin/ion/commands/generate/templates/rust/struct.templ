{# Includes the macros for anonymous types that will be added as child classes #}
{% import "nested_type.templ"  as macros %}
{% import "util_macros.templ"  as util_macros %}

{% macro struct(model, is_nested) %}
{% set struct_info = model.code_gen_type["Structure"] %}

use {{ model.name | snake }}::{{ model.name }};
pub mod  {{ model.name | snake }} {
    use super::*;

    #[derive(Debug, Clone, Default)]
    pub struct {{ model.name }} {
    {% for field_name, field_value in struct_info["fields"] -%}
             {{ field_name | snake | indent(first = true) }}: {{ field_value.0 | fully_qualified_type_name }},
    {% endfor %}
    }

    impl {{ model.name }} {
        pub fn new({% for field_name in struct_info["fields"] | field_names -%}{% set field_value = struct_info["fields"][field_name] %}{{ field_name | snake }}: {{ field_value.0 | fully_qualified_type_name }},{% endfor %}) -> Self {
            Self {
                {% for field_name, field_value in struct_info["fields"] -%}
                {{ field_name | snake }},
                {% endfor %}
            }
        }


        {% for field_name, field_value in struct_info["fields"] -%}pub fn {{ field_name | snake }}(&self) -> &{{ field_value.0 | fully_qualified_type_name }} {
            &self.{{ field_name | snake }}
        }
        {% endfor %}


        pub fn read_from(reader: &mut Reader) -> SerdeResult<Self> {
            let mut abstract_data_type = {{ model.name }}::default();

            reader.step_in()?;
            while reader.next()? != StreamItem::Nothing {
                if let Some(field_name) = reader.field_name()?.text() {
                    match field_name {
                        {% for field_name, field_val in struct_info["fields"] -%}
                            {% set field_value = field_val.0 | fully_qualified_type_name %}
                            {% if field_value | is_built_in_type == false %}
                                {% if field_value is containing("Vec") %}
                                     "{{ field_name }}" => { {{ util_macros::read_as_sequence(field_value=field_value,field_name=field_name,type_store=type_store) }} }
                                {% else %}
                                    "{{ field_name }}" => { abstract_data_type.{{ field_name | snake }} = {{ field_value }}::read_from(reader)?; }
                                {% endif %}
                            {% else %}
                                "{{ field_name }}" => { abstract_data_type.{{ field_name | snake}} = reader.read_{% if field.source is defined and field.source == "symbol" %}symbol()?.text().unwrap(){% else %}{{ field_value | lower | replace(from="string", to ="str") }}()?{% endif %}{% if field_value | lower== "string" %} .to_string() {% endif %}; }
                            {% endif %}
                        {% endfor %}
                     _ => {
                        {% if abstract_data_type["Structure"] %}
                            return validation_error(
                                "Can not read field name:{{ field_name }} for {{ model.name }} as it doesn't exist in the given schema type definition."
                            );
                        {% endif %}
                     }
                    }
                }
            }
            reader.step_out()?;
            Ok(abstract_data_type)
        }

        pub fn write_to<W: IonWriter>(&self, writer: &mut W) -> SerdeResult<()> {
            writer.step_in(IonType::Struct)?;
            {% for field_name, field_val in struct_info["fields"] %}
            {% set field_value = field_val.0 | fully_qualified_type_name %}
            writer.set_field_name("{{ field_name }}");
                {% if field_value | is_built_in_type == false %}
                    {% if field_value is containing("Vec") %}
                        {{ util_macros::write_as_sequence(field_value=field_value,field_name=field_name,type_store=type_store) }}
                    {% else %}
                        self.{{ field_name | snake }}.write_to(writer)?;
                    {% endif %}
                {% else %}
                    {# TODO: Change the following `to_owned` to only be used when writing i64,f32,f64,bool which require owned value as input #}
                    writer.write_{% if field.source is defined and field.source == "symbol" %}symbol{% else %}{{ field_value | lower }}{% endif %}(self.{{ field_name | snake }}.to_owned())?;
                {% endif %}
            {% endfor %}
            writer.step_out()?;
            Ok(())
        }
    }

    {% for inline_type in model.nested_types -%}
            {% set is_nested = true %}
            {{ macros::nested_type(model=inline_type, is_nested=is_nested) }}
    {% endfor -%}
}
{% endmacro struct %}
{{ self::struct(model=model, is_nested=is_nested) }}